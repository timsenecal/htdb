<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="mobile-web-app-capable" content="yes">
<style>
.container {
	position: relative;
	text-align: center;
	color: white;
}
.titletext {
	font-family: sans-serif;
	font-size: 30px;
	position: absolute;
	color: rgba(255, 255, 255, 0.5);
	opacity: 0;
	top: 8px;
	left: 16px;
	-webkit-animation: cssAnimation 15s forwards;
}
@-webkit-keyframes cssAnimation {
	0%	 {opacity: 0.5;}
	90%	{opacity: 0.5;}
	100% {opacity: 0;}
}
</style>
</head>
<body bgcolor=#000000>
<div class="container">
<video id="video" width=95% controls autoplay ></video>
<script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
<script>
	if(Hls.isSupported()) {
		var video = document.getElementById('video');
		var hls = new Hls();
		hls.loadSource('<mvfile>');
		hls.attachMedia(video);
		hls.on(Hls.Events.MANIFEST_PARSED,function() {
			video.play();
		});
 	}
 // hls.js is not supported on platforms that do not have Media Source Extensions (MSE) enabled.
 // When the browser has built-in HLS support (check using `canPlayType`), we can provide an HLS manifest (i.e. .m3u8 URL) directly to the video element throught the `src` property.
 // This is using the built-in support of the plain video element, without using hls.js.
	else if (video.canPlayType('application/vnd.apple.mpegurl')) {
	video.src = '<mvfile>';
	video.addEventListener('canplay',function() {
		video.play();
	});
	}
</script>
<div class="titletext"><showtitle></div>
</div>
<script>
function getCurTime() {
	var vid = document.getElementById('video');
	var xmlhttp = new XMLHttpRequest();
	xmlhttp.open('POST', 'http://<server>/htdb/htdbkilltv.php?id=<id>', false);
	xmlhttp.send();
}
</script>
<script>
	top.document.title="HTDB - <showtitle>"
</script>
<script>
	window.onbeforeunload=function (){getCurTime();};
</script>
</body>
</html>

